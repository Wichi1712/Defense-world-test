<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables de seleccion de mapa

display_set_gui_size(840,680);//esto es para el evento draw gui
image_speed = 0.2;//Control para los iconos de mapa

global.estadoMapa = "menuMapa";
global.MapaNivel = "superior";

OpcionesMapaHor = 0;
arrMapaHor[0] = "Area Desertica";
arrMapaHor[1] = "Area Urbana";
arrMapaHor[2] = "Central Electrica";
arrMapaHor[3] = "Base Militar";
//arrMapaHor[4] = "Area Marina";

OpcionesMapaHor2 = 0;
arrMapaHor2[0] = "Base Marina";
arrMapaHor2[1] = "Zona Polar";
arrMapaHor2[2] = "Area Volcanica";
arrMapaHor2[3] = "Central Nuclear";
//arrMapaHor2[4] = "Area Marina";
//arrMapaHor2[5] = "Base Militar";

//--------------------------------------------------------------------------
//Codigos de prueba
//OpcionesMapaVer = 0;

//arrMapaVer[0] = "Area Marina";
//arrMapaVer[1] = "Base Militar";
//------------------------------------------------------------------------------

arrDibujoArea[0] = spr_zona_desierto;
arrDibujoArea[1] = spr_zona_urbana;
arrDibujoArea[2] = spr_zona_electro;
arrDibujoArea[3] = spr_zona_militar;

arrDibujoArea2[0] = spr_fire;
arrDibujoArea2[1] = spr_fire;
arrDibujoArea2[2] = spr_zona_fuego;
arrDibujoArea2[3] = spr_fire;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Opciones de menu mapa
//Ir_a_menu----&gt; opciones de menuMapa
//Ir_a_inicio--&gt; Volver a menu de juego
//Salir--------&gt; Cerrar juego

//global.strMenuMapa = "irMapa";
//instance_deactivate_object( obj_masterControl);//desactivamos el objeto control

OpMenuMapa = 0;

arrMenuMapa[0] = "Ir a Mapa";
arrMenuMapa[1] = "Ir a Inicio";
arrMenuMapa[2] = "Salir";
//arrMenu[3] = "Modo Mapa";
//arrMenu[4] = "Salir";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Selector de opciones
DirArriba = keyboard_check_pressed( vk_up);
DirAbajo = keyboard_check_pressed( vk_down);
DirDerecha = keyboard_check_pressed( vk_right);
DirIzquierda = keyboard_check_pressed( vk_left);
Aceptar = keyboard_check_pressed( vk_enter);
//CualquierBoton = keyboard_check_pressed( vk_anykey);

//keyRestart = keyboard_check_pressed( ord("R"));
//if ( keyRestart) game_restart();

switch (global.estadoMapa)
{

case "menuMapa":
  //if(CualquierBoton) global.estadoMapa = "mapa";
  
  //controles en modo menu mapa
    //case "irMapa":
    
    
    if ( DirArriba)
    {
          if ( OpMenuMapa &gt; 0) OpMenuMapa--;
    }
        
    if ( DirAbajo)
    {
          if ( OpMenuMapa &lt; array_length_1d( arrMenuMapa) -1) OpMenuMapa++;
    }
        
    if (Aceptar)
    {
       switch(OpMenuMapa)
            {
              case 0:
                global.estadoMapa = "mapa"//Pasamos al siguiente estado
                audio_stop_music();//Detenemos sonido
              break; 
              
              case 1:
                //room_goto( rom_menu);
                game_restart();
                /*Es necesario destruir estas instancias para no
                crear conflictos entre ellas al volver al menu inicio
                ya que en el menu inicio solo debe existir el obj_menu*/
                with( obj_control)instance_destroy();
                with( obj_pausa)instance_destroy();
                with( obj_base)instance_destroy();
                with( obj_base_superior)instance_destroy();
                with( obj_masterControl)instance_destroy();
                instance_destroy();//destruirse a si mismo
                
              break;
              
              case 2:
                game_end();
              break;
              
              //case 3:
                //room_goto( rom_mapa);//Pasamos a la room de mapa
                //audio_stop_music();//Detenemos sonido
              //break;
              
              //case 4:
                //game_end();
              //break;
            }
    }
  
break;

//controles en modo menu
case "mapa":
    //Movimiento seleccion horizontal
    if ( DirIzquierda){
          if ( OpcionesMapaHor &gt; 0) OpcionesMapaHor--;//Fila superior
          if ( OpcionesMapaHor2 &gt; 0) OpcionesMapaHor2--;//Fila inferior
    }
        
    if ( DirDerecha){
          if ( OpcionesMapaHor &lt; array_length_1d( arrMapaHor) -1) OpcionesMapaHor++;//Fila superior
          if ( OpcionesMapaHor2 &lt; array_length_1d( arrMapaHor2) -1) OpcionesMapaHor2++;//Fila inferior
    }
    
    //-------------------------------------------------------------------------------------------------------
    //Movimiento seleccion vertical
    //Se encarga del cambio entre la fila superior e inferior
    if ( DirArriba)global.MapaNivel = "superior";
    if ( DirAbajo)global.MapaNivel = "inferior";
    //---------------------------------------------------------------------------------------------------    
    
    if (Aceptar)
    {
        switch (global.MapaNivel)
        {
            case "superior":
                switch(OpcionesMapaHor)
                    {
                      case 0:
                        room_goto( rom_desierto);
                      break; 
                      
                      case 1:
                        room_goto( rom_nocturno);
                      break;
                      
                      case 2:
                        room_goto( rom_electro);
                      break;
                      
                      case 3:
                         room_goto( rom_militar);
                      break;
                    }
            break;
            
            case "inferior":
                switch(OpcionesMapaHor2)
                    {
                      case 0:
                        room_goto( rom_marino);
                      break; 
                      
                      case 1:
                        room_goto( rom_ice);
                      break;
                      
                      case 2:
                        room_goto( rom_fire);
                      break;
                      
                      case 3:
                        room_goto( rom_magneto);
                      break;
                    }
            break;
        }

    }

break;
    
case"Vehiculos":
  //if(Aceptar) global.estadoMapa = "mapa";
break;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dibuja opciones de menu
draw_set_font( font_menu);
draw_set_halign( fa_center);

txtMenuMapa = "Estas en el modo mapa,# este modo te permite jugar todas las areas#Pero no podras jugar la escena final";
txtMapa = "Pulse ESCAPE para abrir el menú de Mapa";
txtInstrucciones = "Estas son las instrucciones:#Paso1 paso 2 paso3";
strSalirInstrucciones ="Pulse ENTER para volver al menú";
txtInicio = "Pulse cualquier boton para comenzar";
txtInicio2 ="Desarrollado por Wilfredo Chipana 2018";

switch (global.estadoMapa)
{
//pantalla de inicio
case "menuMapa":
   //Dibuja logo inicio
   //draw_background( bg_mapa, 0, 0);
   draw_rectangle_color(0, 0, room_width, room_height, c_gray,0,0,0,0 );
   draw_set_color( c_dkgray);
   draw_text_transformed( room_width div 2, 50, "Menu de Mapa", 2.05, 3.1, 0);//crea sombra
   draw_set_color( c_blue);
   draw_text_transformed( room_width div 2, 50, "Menu de Mapa", 2, 3, 0);
   //Fin logo
   
   //Inicio texto de opciones
   distanTexto = 30;//Indica la distancia entre linea de texto

   for(var i = 0; i &lt; array_length_1d( arrMenuMapa); i++)
   { 
    //Color de texto de opciones
    draw_set_color( c_black);
    draw_text( room_width div 2 - 1, 400 + i * distanTexto, arrMenuMapa[i]);//sombra izquierda
    draw_text( room_width div 2 + 1, 400 + i * distanTexto, arrMenuMapa[i]);//sombra derecha
    draw_set_color( c_orange);
    draw_text( room_width div 2, 400 + i * distanTexto, arrMenuMapa[i]);

    //draw_rectangle(room_width div 2 - 100, 400 + i * distanTexto, room_width div 2 + 100,500 + i * distanTexto,0 );
      
    //indicador
    if ( OpMenuMapa ==i) draw_sprite( spr_selectorizquierda , 0, room_width div 2 -130, 425 + i * distanTexto);//lado izquierdo
    if ( OpMenuMapa ==i) draw_sprite( spr_selectorderecho , 0, room_width div 2 +130, 425 + i * distanTexto);//lado derecho
   }
   //Fin texto de opciones

   //Mensaje para usuario
     draw_set_color( c_black);
     draw_text( room_width div 2, 200, txtMenuMapa);
     draw_set_color( c_white);
     draw_text( room_width div 2 - 1, 200 - 1, txtMenuMapa);
     
     draw_set_font(font_pequeno);//Cambio de fuente de texto
     draw_set_color( c_black);
     draw_text( room_width div 2, 600, txtInicio2);
     draw_set_color( c_white);
     draw_text( room_width div 2 - 1, 600 - 1, txtInicio2);
   //Fin mensaje para usuario
break;
//Fin pantalla de inicio

case "mapa":
   //Inicio cabecera
   draw_set_font( font_barra);//Cambio de fuente de texto
   draw_background( bg_mapa,0,0);
   //draw_sprite_ext( spr_tanquemove, -1, room_width div 2, room_height div 4 - 100, 1, 1, 0, c_white, 1);
   
   //Dibuja titulo     
   draw_set_color( c_dkgray);
   draw_text_transformed( room_width div 2, 50, "Seleccione Objetivo", 2.05, 3.1, 0);//crea sombra
   draw_set_color( c_blue);
   draw_text_transformed( room_width div 2, 50, "Seleccione Objetivo", 2, 3, 0);
   //Fin cabecera
   
   //Texto pie de  mapa
   draw_text( room_width div 2, 600, txtMapa);
   
     
   //Inicio de opciones de seleccion de mapa
     
   PosTexto = 160;//Indica la distancia entre linea de texto

   //Codigo para opciones de la fila superior
   for(var i = 0; i &lt; array_length_1d( arrMapaHor); i++)
   { 
    //Dibujamos imagenes de cada area
    draw_sprite( arrDibujoArea[i], -1, 150 + i * PosTexto, room_height div 3 -15);
   
    //Color de texto
    draw_set_color( c_black);
    draw_text( 150 + i * PosTexto, room_height div 3 - 15, arrMapaHor[i]);
      
    //indicador
    if( global.MapaNivel == "superior")
    {
        if ( OpcionesMapaHor ==i) draw_sprite( spr_selector , -1, 150 + i * PosTexto, room_height div 3 -55);//Selector sup
        if ( OpcionesMapaHor ==i) draw_sprite( spr_selectorInf2 , 0, 150 + i * PosTexto, room_height div 3 +15);//Selector inf
    }
   } 
   
   //--------------------------------------------------------------------------------------------------
   //Codigo para opciones de la fila inferior
   for(var i = 0; i &lt; array_length_1d( arrMapaHor2); i++)
   { 
   //Dibujamos imagenes de cada area
    draw_sprite( arrDibujoArea2[i], -1, 150 + i * PosTexto, room_height div 3 +80);
    
    //Color de texto
    draw_set_color( c_black);
    draw_text( 150 + i * PosTexto, room_height div 3 + 90, arrMapaHor2[i]);
      
    //indicador
    if( global.MapaNivel == "inferior")
    {
        if ( OpcionesMapaHor2 ==i) draw_sprite( spr_selector , -1, 150 + i * PosTexto, room_height div 3 +40);//Selector sup
        if ( OpcionesMapaHor2 ==i) draw_sprite( spr_selectorInf2 , 0, 150 + i * PosTexto, room_height div 3 +120);//Selector inf
    }
   } 
break;

//Inicio pantalla de instrucciones

case "Vehiculos":
   //Dibuja logo
    draw_sprite_ext( spr_tanque_stop, 0, room_width div 2, room_height div 4, 2, 2, 0, c_white, 1);
   //draw_sprite( spr_tanque_stop, 0, room_width div 2, room_height div 4);
      
    draw_set_color( c_dkgray);
    draw_text_transformed( room_width div 2, 100, "Vehiculos", 2.05, 3.1, 0);//crea sombra
    draw_set_color( c_blue);
    draw_text_transformed( room_width div 2, 100, "Vehiculos", 2, 3, 0);
   //Fin logo

   //Texto de intrucciones
    draw_set_color( c_white);
    draw_text( room_width div 2 - 1, 400 - 1, txtInstrucciones);
   //Fin texto de instrucciones

   //Mensaje para usuario
     draw_set_color( c_black);
     draw_text( room_width div 2, 600, strSalirInstrucciones);
     draw_set_color( c_white);
     draw_text( room_width div 2 - 1, 600 - 1, strSalirInstrucciones);
   //Fin mensaje para usuario
break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug
/*
if (instance_exists( obj_control)){
    draw_text( view_wview[0]/2 - 300, view_hview[0]/2 + 160, "numero obj_control =");
    draw_text( view_wview[0]/2 -100, view_hview[0]/2 + 160, instance_number( obj_control));
}

if (instance_exists( obj_masterControl)){
    draw_text( view_wview[0]/2 - 300, view_hview[0]/2 + 180, "numero mastercontrol =");
    draw_text( view_wview[0]/2 -100, view_hview[0]/2 + 180, instance_number( obj_masterControl));
}

if (instance_exists( obj_pausa)){
    draw_text( view_wview[0]/2 - 300, view_hview[0]/2 + 200, "numero pausa =");
    draw_text( view_wview[0]/2 -180, view_hview[0]/2 + 200, instance_number( obj_pausa));
}

if (instance_exists( obj_pausaMapa)){
    draw_text( view_wview[0]/2 - 300, view_hview[0]/2 + 220, "numero pausaMapa =");
    draw_text( view_wview[0]/2 -180, view_hview[0]/2 + 220, instance_number( obj_pausaMapa));
}


draw_text( view_wview[0]/2 - 300, view_hview[0]/2 + 240, "OpMenuMapa =" + string(OpMenuMapa));
draw_text( view_wview[0]/2 - 300, view_hview[0]/2 + 260, "OpcionesMapaHor1 =" + string( OpcionesMapaHor));
draw_text( view_wview[0]/2 - 300, view_hview[0]/2 + 280, "OpcionesMapaHor2 =" + string( OpcionesMapaHor2));
draw_text( view_wview[0]/2 - 300, view_hview[0]/2 + 300, "MapaNivel =" + string(global.MapaNivel));
draw_text( view_wview[0]/2 - 300, view_hview[0]/2 + 320, "EstadoMapa =" + string( global.estadoMapa));
*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Crea una instancia de pausaMapa
instance_create(40, 40, obj_pausaMapa);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
