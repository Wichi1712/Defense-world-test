<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
//window_set_caption( "Defense World");
display_set_gui_size(840,680);//esto es para el evento draw gui

//estado 0 ==&gt; muestra nombre de area.
//estado 1 ==&gt; Crea objeto en la escena.
//estado 2 ==&gt; Muestra texto indicando ganaste, pasa a la siguiente area.
//estado 3 ==&gt; Opciones cuando pierdes.

limite = global.saludBoss;
global.estado = 0;


alarmainicio = room_speed * 2;

alarm[0] = alarmainicio;
//pantallaCompleta = true;


global.zona = "";
global.medallas = 0;

//variables game over
opcionGameover = 0;
arrGameover[0] = "Reintentar";
arrGameover[1] = "Ir a menu";
arrGameover[2] = "Salir";

//audio_play_sound(Australis,10,false);

/*Estas variables son para abrir el fondo negro de inicio de cada zona*/
bordeSup = 0;//superior
bordeInf = room_height;//iniferior
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Activa alarma 0 , cambia estado y pasa a la siguiente room
room_goto_next();
alarm[0] = alarmainicio;
global.estado = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Estado 1
global.estado = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///solo para pruebas de desarrollo
if keyboard_check( vk_f1 )
{
   room_restart();
   alarm[0] = alarmainicio;
   global.estado = 0;
}

if keyboard_check( vk_f2 )
{
   room_goto_next();
   alarm[0] = alarmainicio;
   global.estado = 0;
}

if keyboard_check( vk_f3 )
{
   room_goto_previous();
   alarm[0] = alarmainicio;
   global.estado = 0;
}

if keyboard_check( vk_f4 )
{
global.salud = 0;
}

if keyboard_check( vk_f5 )
{
global.saludBoss = 0;
}

if keyboard_check( vk_f6 )
{
with ( par_tropa){ instance_destroy();}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creacion de objetos y destruccion de objetos
if ( global.estado = 1)
{
    if ( instance_number( obj_tanque)=0 )
     {
       instance_create( 384, 544, obj_tanque);
       instance_create( 64, 32, obj_barraplayer);
     }
     
     if (instance_number( obj_pausa) = 0)
       {instance_create( 64, 64, obj_pausa);}
       
       bordeSup =0;
       bordeInf =room_height;

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///La destruccion de las instancias de Boss se llevan a  cabo en el script _vencido
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control de energia de Boss y destruccion de instancias
/*
    *Si el Boss es destruido entonces destruimos
     sus balas para evitar que siga haciendo da√±o
     a nuestro player.
     
    *Tambien mantenemos la energia en cero evitando que se vuelva negativo
*/

//Comprobando nivel de energia
if ( global.saludBoss &lt;=0){                        
    //Mantenemos la energia en cero
    if global.saludBoss &lt;= 0{ global.saludBoss = 0;}
    
    //Destruimos instancias
    with( par_balatropa){ instance_destroy();}
    with( par_balaboss){ instance_destroy();}
    with( par_balaBossMax){ instance_destroy();}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CREACION DE BOSS
//switch (global.zona)
//{
    //case "Area 1":
    //if( instance_number( object3) &lt;=0)
    //{
    //if ( !instance_exists(obj_ovni))
       //repeat(1)instance_create( 100, 30, obj_ovni);
    //}
    //break;
    
    
    //default: STATEMENT;
//}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///activa alarma 1
/*la alarma 1 se encuentra a un valor activo de 120 mientras 
el estado sea diferente de 2, pero cuando pasa al estado 2
la alarma 1 empieza a descender a cero*/
if ( global.estado != 2) alarm[1] = room_speed * 4;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Selector game over

if (global.estado = 3)
{
if (keyboard_check_pressed( vk_up))
{
      if ( opcionGameover &gt; 0) opcionGameover--;
}
    
if ( keyboard_check_pressed( vk_down))
{
      if ( opcionGameover &lt; array_length_1d( arrGameover) -1) opcionGameover++;
}
    
if (keyboard_check_pressed( vk_enter))
{
   switch(opcionGameover)
        {
          case 0://reintentar
            room_restart();
            alarm[0] = alarmainicio;
            global.estado = 0;
            bordeSup =0;
            bordeInf =room_height;
          break; 
          
          case 1://volver a menu
            game_restart();
            //global.strEstadoJuego = "menu";
            //room_goto( rom_menu);
            with( obj_base){ instance_destroy();}//destruimos la instance base para que no aparezca en el menu.
            with( obj_base_superior){ instance_destroy();}//destruimos la instance base para que no aparezca en el menu.
            instance_destroy();//destruimos el objeto control
          break;
          
          case 2://salir del juego
            game_end();
          break;
        }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tama√±o de pantalla
//espacio = keyboard_check_pressed( vk_space);

//if(espacio){
    //if(pantallaCompleta)pantallaCompleta=false;
    //else if(!pantallaCompleta)pantallaCompleta=true;
    
    //window_set_fullscreen(pantallaCompleta);
//} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Nivel de energia Boss

if ( global.estado != 0)
{

    if(global.estadoBoss == "war"){
        Ancho =16; //Ancho de la barra de vida
        
        //Largo de barra de vida
        var estreche;
        estreche = global.saludBoss/limite*200;
        
    
        
        //Barra de fondo negro
        //draw_sprite_stretched(spr_barra,0,608,32, limite, Ancho);
        draw_sprite(spr_barra_BossFondo,0,608,32);
              
        //Barra verde
        draw_sprite_stretched(spr_barra,1,608,32, estreche,Ancho);
        
        //Barra amarilla
        if global.saludBoss &lt;=50 {draw_sprite_stretched(spr_barra,2,608,32, estreche,Ancho);}
        
        //Barra roja
        if global.saludBoss &lt;=30 {draw_sprite_stretched(spr_barra,3,608,32, estreche,Ancho);}
        
        //Dise√±o borde de barra
        draw_sprite(spr_topbar_boss ,0,608,32);
        
        //Dibuja texto puntaje
        /*
        draw_set_font(font_barra);
        draw_set_color(c_white);
        draw_text( 780, 8,global.saludBoss);
        */
        
        //Dibuja nombre de enemigo
        draw_set_font(font_barra);
        draw_set_color(c_white);
        draw_text( 653, 8, string_upper(global.nombreBoss));
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dibuja linea hasta player
//if ( instance_exists( obj_tanque))
//{
    //if ( luz &gt;= 0)
        //{
        //draw_line_width_color( obj_tanque.x - 2, -2, obj_tanque.x + 2, obj_tanque.y,20, c_yellow,0);
        //}
//}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Nombre de area, texto de zona completada, contador de medallas.

//Texto de inicio de zona y apertura de nivel
if (global.estado = 0)
{
bordeSup+=3;
bordeInf-=3;
draw_set_color(c_yellow);
draw_set_font(font_zona);
draw_rectangle_color(0, bordeSup, room_width, bordeInf, c_black,0,0,0,false);
draw_text( room_width /2, room_height/2 - 20, string_upper( global.zona));
}

//Texto de zona completada
if (global.estado = 2)
{
draw_set_color(c_yellow);
draw_set_font(font_zona);
draw_rectangle_color(0, room_height/2 - 100, room_width, room_height/2 + 100, c_black,0,0,0,false);
draw_text( room_width/2, room_height/2 - 20, string_upper( global.zona));
draw_text( room_width/2, room_height/2 + 40, string_upper("Mision Completa"));
}


//Dise√±o de dibujo de medallas
draw_set_font(font_barra);
draw_set_color(c_white);
//draw_text( 108, 8, "Medalla");
draw_sprite( spr_bonus, 0, 214, 17);
draw_set_color(c_yellow);
//draw_set_font(font_barra);
draw_text( 250, 8, " X  " + string(global.medallas));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game over

/*Inicio de opciones game over*/
//Dibujamos texto
if (global.estado = 3)
{
draw_set_color(c_yellow);
draw_set_font(font_zona);
draw_rectangle_color( room_width/2 - 200, room_height/2 - 200, room_width / 2 + 200, room_height / 2+ 200,c_blue,0,0,0,0);
draw_text( room_width/2, room_height/2 - 200, string_upper( global.zona));
draw_text( room_width/2, room_height/2 - 150, string_upper("Mision Fallida"));

//Dibujamos opciones
distTexto = 30;//El numero 27 indica la distancia entre linea de texto

for(var i = 0; i &lt; array_length_1d( arrGameover); i++)
   { 
    //Color de texto
    draw_set_color( c_olive);
    draw_text( room_width div 2, 400 + i * distTexto, arrGameover[i]);
      
    //indicador
    if ( opcionGameover ==i) draw_sprite( spr_selectorizquierda , 0, room_width div 2 -130, 425 + i * distTexto);//lado izquierdo
    if ( opcionGameover ==i) draw_sprite( spr_selectorderecho , 0, room_width div 2 +130, 425 + i * distTexto);//lado derecho
   } 

}
/*Fin opciones game over*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Informacion para desarrollador
if ( keyboard_check( vk_f7))
{
draw_set_font(font_barra);
draw_set_color(c_white);
draw_text( view_wview[0] / 2 - 300, view_hview[0]/2 + 30, "Informaci√≥n de juego");

draw_text( view_wview[0]/2 -350, view_hview[0]/2 + 50, "Alarma 0 =");
draw_text( view_wview[0]/2 -280, view_hview[0]/2 + 50, alarm[0]);

draw_text( view_wview[0]/2 - 350, view_hview[0]/2 + 90, "Alarma 1 =");
draw_text( view_wview[0]/2 -280, view_hview[0]/2 + 90, alarm[1]);

draw_text( view_wview[0]/2 - 350, view_hview[0]/2 + 110, "Estado =");
draw_text( view_wview[0]/2 -280, view_hview[0]/2 + 110, global.estado);

if (instance_exists( obj_tanque))
{
draw_text( view_wview[0]/2 - 300, view_hview[0]/2 + 150, "posicion x de tanque =" + string(obj_tanque.x));
draw_text( view_wview[0]/2 -350, view_hview[0]/2 + 190, "hspeed =" + string(obj_tanque.movehor));
}

if (instance_exists( obj_Ballfire))
{
draw_text( view_wview[0]/2 - 300, view_hview[0]/2 + 220, "numero instancias Bala player =");
draw_text( view_wview[0]/2 -180, view_hview[0]/2 + 220, instance_number( obj_Ballfire));
}

//if (instance_exists( obj_balaBossMarino))
//{
//draw_text( view_wview[0]/2 - 300, view_hview[0]/2 + 230, "Rebote bala marino =");
//draw_text( view_wview[0]/2 -180, view_hview[0]/2 + 230, string(obj_balaBossMarino.rebote));
//}

if (instance_exists( par_boss))
{
draw_text( view_wview[0]/2 - 300, view_hview[0]/2 + 240, "Estado Boss =" + string( global.estadoBoss));
draw_text( view_wview[0]/2 - 300, view_hview[0]/2 + 250, "Posicion Y Boss =" + string( par_boss.y));
draw_text( view_wview[0]/2 - 300, view_hview[0]/2 + 260, "Posicion X Boss =" + string( par_boss.x));
}

if (instance_exists( obj_masterControl))
{
draw_text( view_wview[0]/2 - 300, view_hview[0]/2 + 280, "Numero de obj_mastercontrol = " + string( instance_number( obj_masterControl )));
draw_text( view_wview[0]/2 - 300, view_hview[0]/2 + 320, "alarma mastercontrol = " + string( obj_masterControl.alarm[0]));
}

if (instance_exists( obj_control))
{
draw_text( view_wview[0]/2 - 300, view_hview[0]/2 + 300, "Numero de obj_control= " + string( instance_number( obj_control)));
//draw_text( view_wview[0]/2 - 300, view_hview[0]/2 + 320, "obj_min X = " + string( obj_minMagneto.x));
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
